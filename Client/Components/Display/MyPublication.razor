@using HIVE.Client.Services
@inject IDocumentService DocumentService
@inject IDialogService DialogService
@inject IActivityLog ActivityLog
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<MudTable MultiSelection="true"  @bind-SelectedItems="_selectedItems"  Elevation="1" Dense="true" @ref="_table" ServerData="@(new Func<TableState, Task<TableData<Document>>>(ServerReload))">
    <ToolBarContent>
        <MudChip Label="true" T="Document" Class="d-block " Variant="Variant.Text"> <code> Selected Document: <strong> (@_selectedItems.Count) </strong></code></MudChip>
        <div class="mx-5">
            <MudTooltip Text="Reload Table" Arrow="true">
                <MudIconButton OnClick="@(()=> _table.ReloadServerData())"
                               Variant="Variant.Text"
                               DisableElevation="true"
                               Color="Color.Success"
                               Size="Size.Medium"
                               Icon="@Icons.Material.Filled.Sync" />
            </MudTooltip>

            <MudTooltip Text="Delete Selected Document" Arrow="true">
                <MudIconButton OnClick="OnDeleteAsync"
                               Variant="Variant.Text"
                               DisableElevation="true"
                               Size="Size.Medium"
                               Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
            </MudTooltip>
        </div>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Href="/upload-document" Class="rounded-0 mx-2" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium"> Add New </MudButton>
        <MudTextField Variant="Variant.Outlined" T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Margin="Margin.Dense"></MudTextField>
        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <MudChip Label="true" Variant="Variant.Text" Color="Color.Info" Size="Size.Large" Class="rounded-0">
                result: @searchTerm (@_table.GetFilteredItemsCount())
            </MudChip>
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh> Detail </MudTh>
        <MudTh><MudTableSortLabel SortLabel="title" T="Document">Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="adviser" T="Document">Adviser </MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="curriculum" T="Document">Academic program </MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="documentStatus" T="Document">Document status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="year" T="Document">Year</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="status" T="Document">Status</MudTableSortLabel></MudTh>
        <MudTh>Edit</MudTh>
    </HeaderContent>
    <RowTemplate>
        
        <MudTd> <MudTooltip Text="See the details"><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => OnReview(context.Id))"> 🗃️ </MudButton></MudTooltip></MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Adviser"> @context.Adviser.Name</MudTd>
        <MudTd DataLabel="Program">

            <MudText Typo="Typo.body2"> <code> @(context.Curriculum.Alt)</code></MudText>

        </MudTd>
        <MudTd DataLabel="documentYear">
            @if (context.ToReview)
            {
                <MudChip Variant="Variant.Filled" Color="Color.Info" Size="Size.Small"> To review </MudChip>
            }
            else
            {
                <MudChip Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"> approved </MudChip>
            }
        </MudTd>
        <MudTd DataLabel="Year">@context.DatePublished.Value.Year</MudTd>
        <MudTd DataLabel="Status">
            @if (context.IsActive)
            {
                <MudChip Variant="Variant.Text" Color="Color.Success" Size="Size.Small"> active </MudChip>
            }
            else
            {
                <MudChip Variant="Variant.Text" Color="Color.Error" Size="Size.Small"> in-active </MudChip>
            }
        </MudTd>
        <MudTd>
            <MudTooltip Text="Edit Selected Document" Arrow="true">
                <MudIconButton Variant="Variant.Text"
                               DisableElevation="false"
                               Size="Size.Medium"
                               Icon="@Icons.Material.Filled.Edit"
                               OnClick="@(() => OnEditAsync(context.Id))"/>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Typo="Typo.body1"> No Item 📂 </MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>
@code {

    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public IEnumerable<Document> Documents { get; set; } = new List<Document>();
    private MudTable<Document> _table;
    private HashSet<Document> _selectedItems = new();
    public int id { get; set; }
    private IEnumerable<Document> _pagedData;
    private int _totalItems;
    private string searchTerm = string.Empty;
    private string _userName = string.Empty;
    [CascadingParameter]
    public Task<AuthenticationState>? Authenticate { get; set; }


    private async Task<TableData<Document>> ServerReload(TableState state)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        Authenticate = customAuthStateProvider.GetAuthenticationStateAsync();
        if (Authenticate != null)
        {
            try
            {
                var account = await Authenticate;
                var email = account.User.Identity?.Name;
                if (email != null)
                {
                    _userName = email;
                    var response = await DocumentService.GetMyDocumentsAsync(email);
                    if (response.IsSuccessStatusCode)
                    {
                        Documents = (await response.Content.ReadFromJsonAsync<List<Document>>())!;
                        if (Documents is null)
                        {
                            NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
                        }
                    }
                
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine($"Something went wrong");
                throw;
            }
        }
        await Task.Delay(300);
        IEnumerable<Document> data = Documents;
        await Task.Delay(300);
        data = data.Where(document =>
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
                return true;
            if (document.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                return true;
            if (document.Abstract.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                return true;
            if (document.UploaderEmail.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                return true;
            //if ($"{document.Authors} {element.Topics} {element.AcademicProgram}".Contains(searchTerm))
            //    return true;
            return false;
        }).ToArray();
             _totalItems = Documents.Count();
        data = state.SortLabel switch
            {
            "title" => data.OrderByDirection(state.SortDirection, o => o.Title),
            "c" => data.OrderByDirection(state.SortDirection, o => o.Adviser.Name),
            "curriculum" => data.OrderByDirection(state.SortDirection, o => o.Curriculum.Alt),
            "year" => data.OrderByDirection(state.SortDirection, o => o.DatePublished),
            "status" => data.OrderByDirection(state.SortDirection, o => o.IsActive),
            _ => data
            };
        _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Document>() { TotalItems = _totalItems, Items = _pagedData };
    }
    private void OnSearch(string text)
    {
         searchTerm = text;
        _table.ReloadServerData();
    }
    private async void OnDeleteAsync()
    {
        foreach (var document in _selectedItems)
        {
            await DocumentService.GetDeleteDocumentById(document.Id);
            await _table.ReloadServerData();
        }
    }
    private async void OnEditAsync(int id)
    {
        var log = await ActivityLog.WriteLog($"{_userName}", "Modified His/Her publication", "MODIFIED", "USER");
        if (log.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/upload-document/{id}");
        }
    }

    private async void OnReview(int id)
    {
        var option = new DialogOptions
        {
            NoHeader = true,
            MaxWidth = MaxWidth.Medium,
            CloseOnEscapeKey = false,
            Position = DialogPosition.TopCenter

        };
        var parameter = new DialogParameters
        {
                ["DocumentId"] = id
        };
        try
        {
            var result = await DialogService.ShowAsync<ViewDocumentDetail>("", parameter, option);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex.Message}");
        }
    }
}
