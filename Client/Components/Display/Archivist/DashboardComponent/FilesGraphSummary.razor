@using System.Globalization
@using System.Linq
@using System.Linq.Expressions
@inject IFileService FileService
@inject IDocumentService DocumentService
@inject ICurriculumService CurriculumService
<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">

<MudGrid Spacing="3" Justify="Justify.FlexStart">
    <MudItem sm="3">
        <MudChart Class="mx-4" ChartType="ChartType.Donut" Width="200px" Height="300px" InputData="@_data.ToArray()" InputLabels="@_labels.ToArray()" LegendPosition="Position.Bottom">
            <CustomGraphics>
                <text class="donut-inner-text align-center justify-center" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="gray" font-family="Poppins" font-size="2"> Total Active Document :</text>
                <text class="donut-inner-text" x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="gray" font-family="Poppins" font-size="6">
                    @_data.Sum().ToString(CultureInfo.InvariantCulture)
                </text>
            </CustomGraphics>
        </MudChart>
    </MudItem>
    <MudItem sm="3">
        <div>
            <MudChart ChartOptions="_options" ChartType="ChartType.Line" LegendPosition="Position.Top"
                      ChartSeries="@_series"
                      XAxisLabels="@_xAxisLabels"
                      Width="200%" Height="350" />
        </div>
    </MudItem>
</MudGrid>
@code {

    List<string> _labels = new();
    List<double> _data = new();
    private List<ChartSeries> _series = new();
    private List<Document> _documents = new ();
    private ChartOptions _options = new();
    private readonly string[] _xAxisLabels = { "2015", "2016", "2017", "2018", "2019", "2021", "2022", "2023" };

    protected override async Task OnInitializedAsync()
    {
        _documents = await DocumentService.GetDocumentsForArchivistAsync();
        DoChart(_documents);
        DoLineGraph(_documents);
    }

    private  void DoChart(List<Document> documents )
    {
        if (!documents.Any()) return;
        foreach (var course in documents.Select(d => d.Curriculum.Alt).Distinct())
        {
            if (string.IsNullOrEmpty(course)) continue;
            _labels.Add(course);
            _data.Add(documents.Count(d => d.Curriculum.Alt.Contains(course, StringComparison.OrdinalIgnoreCase)));
        }

    }

    private void DoLineGraph(List<Document> documents)
    {
        List<double> totalCount = new List<double>();
        foreach (var curriculum in documents.Select(d => d.Curriculum.Alt).Distinct())
        {
            foreach (var axis in _xAxisLabels)
            {
                double count = documents.Count(d => d.DatePublished != null && d.DatePublished.Value.Year.ToString().Equals(axis) && d.Curriculum.Alt.Equals(curriculum));
                if (count > 0)
                {
                    totalCount.Add(count);
                }
                else
                {
                    totalCount.Add(0);
                }
            }
            _series.Add(new ChartSeries
                {
                    Name = curriculum,
                    Data = totalCount.ToArray()
                });
            totalCount.Clear();
        }
        _options.InterpolationOption = InterpolationOption.EndSlope;

    }
}