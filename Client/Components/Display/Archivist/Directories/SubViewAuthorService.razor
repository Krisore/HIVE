@inject IAuthorService AuthorService
@inject ICurriculumService CurriculumService
@inject IDocumentService DocumentService

<MudTable T="Author" Loading="@_isLoading" LoadingProgressColor="Color.Primary" ServerData="@(new Func<TableState, Task<TableData<Author>>>(ServerReload))"
          Dense="true" Hover="true" @ref="_table" Bordered="true" @bind-SelectedItems="_selectedItems">
    <ToolBarContent>
        <MudTextField Variant="Variant.Outlined" T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Margin="Margin.Dense"></MudTextField>
        @if (!string.IsNullOrWhiteSpace(_searchString))
        {
            <MudChip Label="true" Variant="Variant.Text" Color="Color.Info" Size="Size.Large" Class="rounded-0">
                result: @_searchString (@_table.GetFilteredItemsCount())
            </MudChip>
        }
        <MudSpacer />
        <MudChip Label="true" IconColor="Color.Success" Size="Size.Medium" Icon="@Icons.Custom.FileFormats.FileExcel">
            Generate report
        </MudChip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="authorname" T="Author">Author name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="academicProgram" T="Author">Academic Program </MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="document" T="Author">Document</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="document" T="Author">Document Type</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Academic Program">
            @if (_documents != null)
            {
                foreach (var document in _documents.Where(d => d.Id == context.DocumentId))
                {
                    <MudChip Label="true" Color="Color.Info" Variant="Variant.Text"><code>@document.Curriculum.Alt </code> </MudChip>
                }
            }
        </MudTd>
        <MudTd DataLabel="Document">
            @if (_documents != null)
            {
                foreach (var document in _documents.Where(d => d.Id == context.DocumentId))
                {
                    <MudText Typo="Typo.caption"><code>@document.Title </code></MudText>
                }
            }
        </MudTd>
        <MudTd DataLabel="Document Type">
            @if (_documents != null)
            {
                foreach (var document in _documents.Where(d => d.Id == context.DocumentId))
                {
                    <MudChip Label="true" Color="Color.Primary" Variant="Variant.Text"> <code>@document.Reference.Name </code></MudChip>
                }
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<Author>? _table;
    private IEnumerable<Author> _pagedData;
    private List<Document>? _documents = new();
    private HashSet<Author> _selectedItems = new();
    private List<Curriculum> _programs = new();
    private int _totalItems;
    private bool _isLoading = true;
    private string _searchString = null;
    private async Task<TableData<Author>> ServerReload(TableState state)
    {
        _isLoading = true;
        _documents = await DocumentService.GetDocumentsForArchivistAsync();
        _programs = await CurriculumService.GetProgramsAsync();
        IEnumerable<Author> author = await AuthorService.GetAllAuthorAsync();
        await Task.Delay(300);
        author = author.Where(element =>
        {
            return string.IsNullOrWhiteSpace(_searchString) || element.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
        }).ToArray();
        _totalItems = author.Count();
        author = state.SortLabel switch
        {
            "authorname" => author.OrderByDirection(state.SortDirection, o => o.Name),
            _ => author
            };
        _isLoading = false;
        _pagedData = author.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Author>() { TotalItems = _totalItems, Items = _pagedData };
    }
    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }
}
