@using System.Globalization
@using System.Net
@using MudBlazor
@inject IDocumentService DocumentService
@inject IAuthorService AuthorService
@inject ICurriculumService ProgramService
@inject IAdviserService AdviserService
@inject IFileService FileService
@inject ITopicService TopicService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IDocumentReferenceService DocumentReference
@inject IDialogService DialogService
<style>
    .selected {
        background-color: #fccece !important;
    }

    .selected > td {
        color: white !important;
    }

    .selected > td .mud-input {
        color: white !important;
    }
</style>
<MudTable @ref="@_table"
          Items="@_documents"
          RowsPerPage="5"
          Hover="true"
          Elevation="0"
          Bordered="true"
          Loading="@isLoading" LoadingProgressColor="Color.Primary"
          Dense="true"
          Breakpoint="Breakpoint.Sm"
          OnRowClick="RowClickEvent"
          RowClassFunc="@SelectedRowClassFunc"
          T="Document">
    <HeaderContent>
        <MudTh>
            @if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                <p>Search Term :  <MudChip Color="Color.Tertiary" Size="Size.Small" Label="true">  <code>@SearchTerm</code></MudChip></p>
            }
            <MudDivider Class="my-2" DividerType="DividerType.Middle"/>
            <div class="d-flex inline">
               @if (string.IsNullOrWhiteSpace(SearchTerm))
               {
                   <MudChip Color="Color.Primary" Size="Size.Large" Variant="Variant.Text" Label="true">
                       <code>Total Documents: @((long)_table.GetFilteredItemsCount())</code>
                   </MudChip>
               }
               else
               {
                   <MudChip Color="Color.Primary" Size="Size.Large" Variant="Variant.Text" Label="true"><code>Results: @((long)_table.GetFilteredItemsCount())</code></MudChip>
               }
            </div>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
           
            <ViewDocumentCard Document="@context" SearchTerm="@SearchTerm" Files="@_files" Advisers="_advisers" Programs="_programs" />
            
        </MudTd>
    </RowTemplate>
    <LoadingContent>
        <LoadingCard/>
    </LoadingContent>
    <NoRecordsContent>
        No Result Found 😣
    </NoRecordsContent>
    <PagerContent>
        <div class="d-flex flex-column align-center">
            <MudPagination SelectedChanged="PageChanged" Rectangular="true" Variant="Variant.Text" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4"/>
        </div>
    </PagerContent>
</MudTable>
<ViewDrawer Document="_document" IsOpen="IsOpen" Authors="_authors" SearchTerm="@SearchTerm" />
@code {
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    [Parameter] public string SearchTerm { get; set; } = string.Empty;
    private string _searchString1 = "";
    private List<Document>? _documents  = new();
    private List<Curriculum> _programs = new();
    private List<Adviser> _advisers = new();
    private List<FileEntry> _files = new();
    private List<Author> _authors = new();
    private Document _document = new();
    private TableRowClickEventArgs<Document> _eventClick = new();



    private bool IsOpen { get; set; } = false;
    private MudTable<Document> _table = new();
    private int _selectedRowNumber = -1;
    private readonly List<string> _clickedEvents = new();
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true;
            await Task.Delay(300);
            IEnumerable<Document>? documents = new List<Document>();
            var result = await DocumentService.GetDocumentsAsync();
            if (result.IsSuccessStatusCode)
            {
                documents = await result.Content.ReadFromJsonAsync<IEnumerable<Document>>();
            }
            else
            {
                documents.DefaultIfEmpty();
            }

            if (string.IsNullOrWhiteSpace(SearchTerm))
            {
                _documents = documents.ToList();
            }
            else
            {
                _documents = documents.Where(d => d.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
                                                      || d.Abstract.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
                                                      || d.DatePublished.Value.Year.ToString().Contains(SearchTerm.ToString().ToLower())
                                                      || d.Authors.Any(a => a.Name.ToLower().Contains(SearchTerm.ToLower()) 
                                                      || d.Reference.Name.ToLower().Contains(SearchTerm.ToLower())
                                                      || d.Curriculum.Name.ToLower().Contains(SearchTerm.ToLower())
                                                      || d.Curriculum.Alt.ToLower().Contains(SearchTerm.ToLower())
                                                      || d.Topics.Any(t => t.Name.ToLower().Contains(SearchTerm.ToLower())))).ToList();
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ////get list of the following 
        _files = await FileService.GetAllFiles();
        //_programs = await ProgramService.GetProgramsAsync();
        //_advisers = await AdviserService.GetAdvisersAsync();
        _authors = await AuthorService.GetAllAuthorAsync();
        isLoading = false;
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
    private void RowClickEvent(TableRowClickEventArgs<Document> e)
    {
        this._eventClick = e;
        IsOpen = !IsOpen;
        _document = _eventClick.Item;
        if(IsOpen == false)
        {
            IsOpen = true;
        }
        _clickedEvents.Add("Row has been clicked");
    }
    private string SelectedRowClassFunc(Document element, int rowNumber)
    {
        if (_selectedRowNumber == rowNumber)
        {
            _selectedRowNumber = -1;
            return string.Empty;
        }
        else if (_table.SelectedItem != null && _table.SelectedItem.Equals(element))
        {
            _selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task<Curriculum> GetAcademicProgram(int id)
    {
        var response = await ProgramService.GetCurriculumById(id);
        return response;
    }

}