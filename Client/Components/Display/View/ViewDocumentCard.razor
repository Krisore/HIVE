@inject IDialogService DialogService
<AuthorizeView>
    <Authorized>
        <MudCard Class="cursor-pointer" Elevation="1">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Image="image/Pup_logo.jpg" Size="Size.Large" />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.caption">Polytechnic University of the Philippines </MudText> <br />
                    <MudText Style="font-size: 70%"><i>posted on </i> @Document.DateUploaded.ToLongDateString()</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudChip Label="true" Size="Size.Small" Color="Color.Primary" Class="rounded-l-xl" Variant="Variant.Filled">@Document.Reference.Name </MudChip>
                    <MudChip Color="Color.Info" Size="Size.Small" Label="true" Class="rounded-0" Variant="Variant.Filled">@Document.Curriculum.Alt</MudChip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudCardContent>
                <div class="d-inline">
                    <MudText Class="d-block" Typo="Typo.subtitle2" Align="Align.Justify">

                        @if (string.IsNullOrWhiteSpace(SearchTerm))
                        {
                            <MudText Typo="Typo.subtitle2">
                                @Document.Title <code> (@(Document.DatePublished.Value.Year)) </code>
                            </MudText>
                        }
                        else
                        {
                            <MudHighlighter Text="@Document.Title" UntilNextBoundary="true" HighlightedText="@SearchTerm" />
                            <code> (@(Document.DatePublished.Value.Year)) </code>
                        }
                    </MudText>
                </div>
                @foreach (var topic in Document.Topics)
                {
                    @if (string.IsNullOrWhiteSpace(SearchTerm))
                    {
                        <MudChip Color="Color.Primary" Size="Size.Small" Variant="Variant.Text">@topic.Name</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Primary" Size="Size.Small" Variant="Variant.Text"><MudHighlighter Class="mud-secondary-text" Style="background-color:transparent;font-weight:bold" Text="@topic.Name" UntilNextBoundary="true" HighlightedText="@SearchTerm" /></MudChip>
                    }
                }
            </MudCardContent>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudCardActions>
                <MudButton Class="rounded-0" OnClick="@(() => DownloadFileAsync(Document.File.FileName, Document.File.FileName, Document.Title))"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.Download"
                               Variant="@Variant.Filled"
                               Color="@Color.Primary"
                               DisableElevation="@true">
                        Download
                    </MudButton>
                <MudButton Class="rounded-0 mx-2"
                           Size="Size.Small"
                           Variant="@Variant.Outlined"
                           Color="@Color.Default"
                           DisableElevation="true"
                           OnClick="ViewDetailedAsync">
                    View
                </MudButton>
            </MudCardActions>
        </MudCard>
    </Authorized>
    <NotAuthorized>
        <MudCard Class="cursor-pointer" Elevation="1">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Image="image/Pup_logo.jpg" Size="Size.Large" />
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.caption">Polytechnic University of the Philippines </MudText> <br />
                    <MudText Style="font-size: 70%"><i>posted on </i> @Document.DateUploaded.ToLongDateString()</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudChip Label="true" Size="Size.Small" Color="Color.Primary" Class="rounded-l-xl" Variant="Variant.Filled">@Document.Reference.Name </MudChip>
                    <MudChip Color="Color.Info" Size="Size.Small" Label="true" Class="rounded-0" Variant="Variant.Filled">@Document.Curriculum.Alt</MudChip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudCardContent>
                <div class="d-inline">
                    <MudText Class="d-block" Typo="Typo.subtitle2" Align="Align.Justify">

                        @if (string.IsNullOrWhiteSpace(SearchTerm))
                        {
                            <MudText Typo="Typo.subtitle2">
                                @Document.Title <code> (@(Document.DatePublished.Value.Year)) </code>
                            </MudText>
                        }
                        else
                        {
                            <MudHighlighter Text="@Document.Title" UntilNextBoundary="true" HighlightedText="@SearchTerm" />
                            <code> (@(Document.DatePublished.Value.Year)) </code>
                        }
                    </MudText>
                </div>
                @foreach (var topic in Document.Topics)
                {
                    @if (string.IsNullOrWhiteSpace(SearchTerm))
                    {
                        <MudChip Color="Color.Primary" Size="Size.Small" Variant="Variant.Text">@topic.Name</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Primary" Size="Size.Small" Variant="Variant.Text"><MudHighlighter Class="mud-secondary-text" Style="background-color:transparent;font-weight:bold" Text="@topic.Name" UntilNextBoundary="true" HighlightedText="@SearchTerm" /></MudChip>
                    }
                }
            </MudCardContent>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudCardActions>
                <MudButton Class="rounded-0 mx-2"
                           Size="Size.Small"
                           Variant="@Variant.Outlined"
                           Color="@Color.Default"
                           DisableElevation="true"
                           OnClick="ViewDetailedAsync">
                    View
                </MudButton>
            </MudCardActions>
        </MudCard>
    </NotAuthorized>
</AuthorizeView>
@code {

    [Parameter]
    public Document Document { get; set; }
    [Parameter]
    public string SearchTerm { get; set; }
    private async Task DownloadFileAsync(string fileName, string storeFileName, string documentTitle)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"{documentTitle}" },
            { "ButtonText", "Download" },
            { "StoreFileName", storeFileName },
            { "FileName", fileName }
        };
        await DialogService.ShowAsync<DialogDownload>("Download a copy 📦", parameters);
    }
    private async void ViewDetailedAsync()
    {
        var documentId = Document.Id;
        var option = new DialogOptions
        {
            NoHeader = true,
            MaxWidth = MaxWidth.Medium,
            CloseOnEscapeKey = false,
            Position = DialogPosition.TopCenter

        };
        var parameter = new DialogParameters
        {
            ["DocumentId"] = documentId
        };
        try
        {
            var result = await DialogService.ShowAsync<ViewDocumentDetail>("", parameter, option);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex.Message}");
        }
    }
}
