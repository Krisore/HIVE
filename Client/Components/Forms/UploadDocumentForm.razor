@using Microsoft.AspNetCore.Components.Forms
@inject IDocumentService DocumentService
@inject IDocumentHistoryService DocumentHistoryService
@inject IDocumentReferenceService DocumentReferenceService
@inject ICurriculumService CurriculumService
@inject IAdviserService AdviserService
@inject IDialogService DialogService
@inject IFileService FileService
@inject IActivityLog ActivityLog
@inject ISnackbar Snack
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudCard>
                <MudForm Model="@RequestDocument" @ref="form" @bind-IsValid="_success">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Primary"> @context.User.Identity.Name[0] </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@context.User.Identity.Name</MudText>
                        <MudText Typo="Typo.caption"> @DateTime.Now.ToLongDateString()</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudTooltip Text="Document Privacy" Arrow="true">
                            <MudChip Variant="Variant.Text" Color="Color.Primary" Class="rounded-0 rounded-l-xl"><span>@(RequestDocument.IsOpenAccess ? "Public" : "Private")</span></MudChip>
                        </MudTooltip>
                        <MudToggleIconButton @bind-Toggled="@RequestDocument.IsOpenAccess"
                                             Icon="@Icons.Material.Filled.Lock" Color="@Color.Error" Title="Private"
                                             ToggledIcon="@Icons.Material.Filled.LockOpen" ToggledColor="@Color.Success" ToggledTitle="Public"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider></MudDivider>
                <MudCardContent>
                        <MudTextField T="string"
                                      @bind-Value="RequestDocument.Title"
                                      For="@(() => RequestDocument.Title)"
                                      Margin="Margin.Dense"
                                      Label="Title"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="Title is required"
                                      Validation="@(new Func<string, IEnumerable<string>>(DocumentValidation))" />
                        <MudTextField @bind-Value="RequestDocument.Abstract"
                                      For="@(() => RequestDocument.Abstract)"
                                      Immediate="true"
                                      Label="Abstract"
                                      Required="true"
                                      RequiredError="Abstract is required"
                                      Variant="Variant.Outlined"
                                      Lines="5"/>
                        <MudDivider Class="my-2"/>
                        <MudText Typo="Typo.caption"> Document Topic </MudText>
                        @if (RequestDocument.Topics != null)
                        {
                            for (int i = 0; i < RequestDocument.Topics.Count; i++)
                            {
                                int index = i;
                                <MudChip Size="Size.Small" Variant="Variant.Text" Text="@RequestDocument.Topics[index].Name" Color="Color.Primary" OnClose="@((e) => RemoveTopic(index))">
                                </MudChip>
                            }
                        }
                        <div class=" d-flex inline my-2">
                            <MudIconButton Class="my-2" OnClick="AddTopicAsync" Size="Size.Small" Color="Color.Primary" Variant="Variant.Text" Icon="@Icons.Material.Filled.Add"/>
                            <MudTextField T="string" Clearable="true" Class="mx-1" AdornmentColor="Color.Primary" @bind-Value="_topicName"
                                          Label="Topic"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"/>

                            <MudAutocomplete T="Reference"
                                             Class="mx-1"
                                             CoerceText="true"
                                             CoerceValue="true"
                                             RequiredError="Project Type is Required"
                                             Label="Project Type"
                                             @bind-Value="@_selectedDocumentType"
                                             SearchFunc="@SearchDocumentType" ToStringFunc="@(e => e == null ? null : $"{e.Name}")"
                                             Variant="Variant.Outlined"
                                             Dense="true"
                                             Margin="Margin.Dense"/>
                        </div>
                        <div class="d-flex inline my-2">

                            <MudAutocomplete T="Adviser"
                                             Class="mx-1"
                                             Required="true"
                                             CoerceText="true"
                                             CoerceValue="true"
                                             RequiredError="Adviser is Required"
                                             Clearable="true"
                                             Label="Project Adviser"
                                             @bind-Value="@_selectedAdviser"
                                             SearchFunc="@SearchAdvisers" ToStringFunc="@(e => e == null ? null : $"{e.Name}")"
                                             Variant="Variant.Outlined"
                                             Dense="true"
                                             Margin="Margin.Dense"/>

                            <MudAutocomplete T="Curriculum"
                                             Class="mx-1"
                                             CoerceText="true"
                                             CoerceValue="true"
                                             RequiredError="Academic Program is Required"
                                             Clearable="true"
                                             Label="Academic Program"
                                             @bind-Value="@_selectedAcademicProgram"
                                             SearchFunc="@SearchAcademicProgram" ToStringFunc="@(e => e == null ? null : $"{e.Name}")"
                                             Variant="Variant.Outlined"
                                             Dense="true"
                                             Margin="Margin.Dense"/>
                        </div>
                        <MudDivider Class="my-2"/>
                        <div class="d-flex inline">
                            <MudDatePicker @bind-Date="RequestDocument.DatePublished"
                                           Required="true"
                                           AdornmentColor="Color.Primary"
                                           Class="my-2"
                                           Editable="true"
                                           For="@(() => RequestDocument.DatePublished)"
                                           PickerVariant="PickerVariant.Dialog"
                                           Label="Date published"
                                           DateFormat="dd.MM.yyyy"
                                           OpenTo="OpenTo.Date"
                                           Orientation="Orientation.Portrait"
                                           Variant="Variant.Outlined"
                                           Margin="Margin.Dense"/>
                            <div class="d-block mt-2 mx-2">
                                <MudSelect Margin="Margin.Dense" @bind-Value="RequestDocument.Status" 
                                           For="@(() => RequestDocument.Status)"
                                           Required="true"
                                           AdornmentIcon="@Icons.Custom.Uncategorized.ColorPalette" 
                                           AdornmentColor="Color.Primary" T="string" Label="Version Status" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Draft")" />
                                    <MudSelectItem Value="@("Under review")" />
                                </MudSelect>
                            </div>
                        </div>
                        <MudDivider Class="my-2"/>
                        <div class="d-flex inline">
                            <MudTooltip Text="Upload File" Arrow="true">
                                <MudFileUpload Class="mx-2" T="IBrowserFile" Accept=".pdf" FilesChanged="OnInputFileChange">
                                    <ButtonTemplate Context="john">
                                        <MudFab HtmlTag="label"
                                                Color="Color.Primary"
                                                Icon="@Icons.Material.Filled.FilePresent"
                                                for="@john"/>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </MudTooltip>
                            @if (Id != null)
                            {
                                @foreach (var file in Files.Where(f => f.Id == RequestDocument.FileId))
                                {
                                    <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                                        <MudText Typo="Typo.caption"> Old attached File :  @file.FileName</MudText>
                                        <MudChip Color="Color.Error" Variant="Variant.Text" Label="true">
                                            <code>@file.Size bytes</code>
                                        </MudChip>
                                    </MudListItem>
                                }
                            }
                            @if (File != null)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@File">
                                    <MudText Typo="Typo.caption"> New Attached File : @File.Name</MudText>
                                    @if (string.IsNullOrWhiteSpace(_isExist))
                                    {
                                    <MudChip Color="Color.Error" Variant="Variant.Text" Label="true">
                                    <code>@File.Size bytes</code>
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="Color.Error" Variant="Variant.Text" Label="true">
                                            <code>@_isExist</code>
                                        </MudChip>
                                    }
                                </MudListItem>
                            }
                        </div>
                        <MudDivider Class="my-3" />
                        <MudCheckBox Dense="true" T="bool" For="@(() => RequestDocument.IsConfirmForPlagiarism)" @bind-Checked="@RequestDocument.IsConfirmForPlagiarism" Required="true" Color="Color.Primary" UnCheckedColor="Color.Default" Size="Size.Small">
                            <MudText Typo="Typo.caption">I confirm that this document has been checked for plagiarism.</MudText>
                        </MudCheckBox>
                        <MudCheckBox Dense="true" T="bool" For="@(() => RequestDocument.IsConfirmedForGrammarAndStatistic)" @bind-Checked="@RequestDocument.IsConfirmedForGrammarAndStatistic" Required="true" Color="Color.Primary" UnCheckedColor="Color.Default" Size="Size.Small">
                            <MudText Typo="Typo.caption">I confirm that this document has been checked for grammar and statistics.</MudText>
                        </MudCheckBox>
                        <MudCheckBox Dense="true" T="bool" For="@(() => RequestDocument.IsAgree)" @bind-Checked="@RequestDocument.IsAgree" Required="true" Color="Color.Primary" UnCheckedColor="Color.Default" Size="Size.Small">
                            <MudText Typo="Typo.caption">I have read and understood, <MudText Typo="Typo.caption" @onclick="OpenDocumentPolicy" Color="Color.Primary"> <strong><u> the privacy policy for documents. </u> </strong>  </MudText></MudText>
                        </MudCheckBox>
                    </MudCardContent>
                    <MudDivider DividerType="DividerType.FullWidth"/>
                    <MudCardActions>
                        <div class="ml-auto">
                            <MudButton Class="mx-2 my-2 rounded-0"
                                       ButtonType="ButtonType.Reset"
                                       Variant="Variant.Outlined"
                                       Color="Color.Default"
                                       DisableElevation="true"
                                       Disabled="false">
                                Clear
                            </MudButton>
                           @if (Id is not null)
                           {
                               <MudButton Class="mx-2 my-2 rounded-0"
                                          Variant="Variant.Filled"
                                          Color="Color.Primary"
                                          OnClick="HandleSubmit"
                                          DisableElevation="true">
                                   @_buttonText
                               </MudButton>
                           }
                           else
                           {
                               <MudButton Class="mx-2 my-2 rounded-0"
                                          Disabled="@(!_success)"
                                          Variant="Variant.Filled"
                                          Color="Color.Primary"
                                          OnClick="HandleSubmit"
                                          DisableElevation="true">
                                   @_buttonText
                               </MudButton>
                           }
                        </div>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {

    private UploadDocumentRequest RequestDocument { get; set; } = new();
    string[] _formError = { };
    [Parameter]
    public int? Id { get; set; } 
    private IEnumerable<Document>? Documents { get; set; }
    private Activity _activity = new();
    string _buttonText = "Submit";
    string _userName = string.Empty;
    private List<string> Titles = new List<string>();
    private List<Reference> Types { get; set; } = new();
    private List<CreateTopic> _selectedTopics = new();
    private List<Topic> _topics = new();
    private List<FileEntry> Files = new List<FileEntry>();
    private Reference _selectedDocumentType = new();
    private Adviser _selectedAdviser = new();
    private Curriculum _selectedAcademicProgram = new();
    private string _topicName = string.Empty;
    private List<string> _errors = new();
    private Document _document = new();
    private string _text = "File must be Portable Document Format";
    private Severity _severity = Severity.Info;
    bool _success;
    string _isExist = "";
    MudForm? _form;
    [CascadingParameter]
    public Task<AuthenticationState>? Authenticate { get; set; }
    async Task OpenDocumentPolicy()
    {
        var result = await DialogService.Show<DialogDocumentPrivacy>("Privacy policy for documents. 📑").Result;
        if (!result.Canceled)
        {
            RequestDocument.IsAgree = (bool)(result.Data ?? false);
           
        }
    }
    protected override async Task OnParametersSetAsync()
    {

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        Authenticate = customAuthStateProvider.GetAuthenticationStateAsync();
        if (Authenticate != null)
        {
            var account = await Authenticate;
            if (account.User.Identity?.Name != null)
            {
                RequestDocument.UploaderEmail = account.User.Identity.Name!;
            }
        }

        if (Id != null)
        {
            var response = await DocumentService.GetDocumentByDataTransfer((int)Id);
            var files = await FileService.GetAllFiles();
            Files = files;
            RequestDocument = response;
            RequestDocument.Topics = response.Topics;
            _selectedAcademicProgram = await CurriculumService.GetCurriculumById(RequestDocument.CurriculumId);
            _selectedAdviser = await AdviserService.GetAdviserAsync(RequestDocument.AdviserId);
            _selectedDocumentType = await DocumentReferenceService.GetReferenceById(RequestDocument.AdviserId);
            var authenticate = await Authenticate;
            if (authenticate.User.Identity is {Name: { } })
            {
                _userName = authenticate.User.Identity.Name;
            }
        }


    }
    private IEnumerable<string> DocumentValidation(string document)
    {
        var documents = Titles;
        if (documents.Any(d => d.ToLower().Equals(document.ToLower())) && Id is null)
        {
            yield return "Document Title is already taken";
        }
    }
    private IBrowserFile? File;
    private FileEntry _onFileEntry = new();
    MudForm? form;
    private async Task OnInputFileChange(IBrowserFile? e)
    {
        this.File = e;
        _isExist = "";
        Files = await FileService.GetAllFiles();
        if (Files.Any(f => File != null && f.FileName != null && f.FileName.ToLower().Equals(File.Name.ToLower())))
        {
            await DialogService.ShowMessageBox(
                "This file is already uploaded", 
                "Your file name is already exist.",
                "Ok");
            _isExist = "This file is already exist.";
        }
    }
    private async Task<int> FileUploadAsync()
    {
        try
        {
            var result =  await FileService.UploadFileAsync(File);
            if (result.IsSuccessStatusCode)
            {
                var newUploadResults = FileService.File;
                _onFileEntry = newUploadResults;
            }
        }
        catch (Exception ex)
        {
            _errors.Add($"{ex.Message}");
        }
        return _onFileEntry.Id;
    }
    protected override async Task OnInitializedAsync()
    {
        _buttonText = Id == null ? "Proceed" : "Update document";
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        Authenticate = customAuthStateProvider.GetAuthenticationStateAsync();
        if (Authenticate != null)
        {
            var account = await Authenticate;
            if (account.User.Identity?.Name != null)
            {
                RequestDocument.UploaderEmail =  account.User.Identity.Name!;
            }
        }
        var response = await DocumentService.DocumentTitles();
        Titles = response;
    }
    private async Task<IEnumerable<Reference>> SearchDocumentType(string value)
    {
        var result = await DocumentReferenceService.GetReferencesAsync(value);
        return result;
    }
    private async Task<IEnumerable<Curriculum>> SearchAcademicProgram(string value)
    {
        var result = await CurriculumService.GetCurriculumBySearch(value);
        return result;
    }
    private async Task<IEnumerable<Adviser>> SearchAdvisers(string value)
    {
        var result = await AdviserService.GetAdvisersBySearchAsync(value);
        return result;
    }
    private  void AddTopicAsync()
    {
        var topic = new CreateTopic
        {
            Name = _topicName,
        };
        _topicName = string.Empty;
        RequestDocument.Topics.Add(topic);
    }
    private void RemoveTopic(int index)
    {
        RequestDocument.Topics.RemoveAt(index);
       
    }
    private async void HandleSubmit()
    {
        try
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            Authenticate = customAuthStateProvider.GetAuthenticationStateAsync();
            if (Authenticate != null)
            {
                var account = await Authenticate;
                if (account.User.Identity?.Name != null)
                {
                    RequestDocument.UploaderEmail = account.User.Identity.Name!;
                }
            }

            if (Id != null)
            {
                if (File is not null)
                {
                    RequestDocument.FileId = await FileUploadAsync();
                }
                RequestDocument.Id = (int)Id;
                RequestDocument.CurriculumId = _selectedAcademicProgram.Id;
                RequestDocument.AdviserId = _selectedAdviser.Id;
                RequestDocument.ReferenceId = _selectedDocumentType.Id;
                if (IsValid(RequestDocument))
                {
                    var response = await DocumentService.UpdateDocumentAsync(RequestDocument.Id, RequestDocument);
                    Snack.Add("Processing to Author Form", Severity.Info);
                    await DialogService.ShowMessageBox("Uploaded Successful! ✔️", "You will be navigate to Author form", "Ok");
                    var log =  await ActivityLog.WriteLog($"{RequestDocument.UploaderEmail}", $"Upload a Document Titled: {RequestDocument.Title}", "UPLOAD", "USER");
                    var history = new DocumentHistory
                    {
                        Title = "Modified",
                        ModifiedDate = DateTime.Now,
                        DocumentId = RequestDocument.Id,
                        Owner = RequestDocument.UploaderEmail
                    };
                    var documentHistory = await DocumentHistoryService.InsertDocumentModified(history);
                    if (log.IsSuccessStatusCode || documentHistory.IsSuccessStatusCode)
                    {
                        Navigation.NavigateTo($"/document-author/{(int)Id}");
                    }
                }
                else
                {
                    var parameters = new DialogParameters
                        {
                            ["Errors"] = _errors
                        };
                    await DialogService.ShowAsync<DialogIsValid>("", parameters);
                    _errors.Clear();
                }
            }
            else
            {
                RequestDocument.ReferenceId = _selectedDocumentType.Id;
                RequestDocument.CurriculumId = _selectedAcademicProgram.Id;
                RequestDocument.AdviserId = _selectedAdviser.Id;
                if (IsValid(RequestDocument))
                {

                    RequestDocument.FileId = await FileUploadAsync();
                    var response = await DocumentService.RequestUploadDocumentAsync(RequestDocument);
                    if (response.IsSuccessStatusCode)
                    {
                        var log =  await ActivityLog.WriteLog($"{RequestDocument.UploaderEmail}", $"Upload a Document Titled: {RequestDocument.Title}", "UPLOAD", "USER");
                        if (log.IsSuccessStatusCode)
                        {
                            Snack.Add("Processing to Author Form", Severity.Info);
                            _text = "Successfully";
                            var document = DocumentService.Document.Id;
                            Navigation.NavigateTo($"/document-author/{document}", true);
                        }
                    }
                }
                else
                {
                    var parameters = new DialogParameters
                        {
                            ["Errors"] = _errors
                        };
                    await DialogService.ShowAsync<DialogIsValid>("", parameters);
                    _errors.Clear();
                }
            }
        }
        catch(Exception exception)
        {
            Console.WriteLine($"{exception.Message}");
            await ActivityLog.WriteLog($"{RequestDocument.UploaderEmail}", $"{exception.Message}", "EXCEPTION", "USER");
        }
    }

    private bool IsValid(UploadDocumentRequest document)
    {
        if (string.IsNullOrEmpty(document.Title) || string.IsNullOrEmpty(document.Abstract))
        {
            _errors.Add($"Fill the required text File is required");
            return false;
        }
        return true;

    }
}
