@using Microsoft.AspNetCore.Components
@using System.Text.RegularExpressions
@inject IUserService UserService
@inject ISnackbar Snack
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudDivider />
            <MudCardContent>
                <MudAlert Severity="@severity" Dense="true" Class="rounded-0 my-2 rounded-t"> @_text </MudAlert>
                <div class="my-2 d-flex block justify-left align-center">
                    <MudTextField AdornmentIcon="@Icons.Material.Rounded.Search" Adornment="Adornment.End" AdornmentColor="Color.Secondary" Class="mx-2"
                                  @bind-Value="_email" Label="Email"
                                  Clearable="true"
                                  Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudButton Class="rounded-0" Disabled="@_processing" EndIcon="@Icons.Material.Rounded.Mail" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                               Size="Size.Medium" OnClick="OnSending">
                        @if (_processing)
                        {
                            <MudText>Sending..</MudText>
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Send</MudText>
                        }
                    </MudButton>
                </div>

                @if (_found)
                {
                    <MudForm Model="_request" @bind-IsValid="@_success">
                        <MudDivider Class="my-2" DividerType="DividerType.Middle" />
                        <MudTextField @bind-Value="@_request.Token"
                                  Class="my-1"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  Label="Reset Password Token"
                                  Variant="Variant.Outlined"
                                  AdornmentIcon="@Icons.Material.Rounded.GeneratingTokens"
                                  Adornment="Adornment.End" />
                        <MudTextField @bind-Value="@_request.Password"
                                  Class="my-1"
                                  @ref="_pwField1"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Margin="Margin.Dense"
                                  Label="New Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                                  Variant="Variant.Outlined"
                                  AdornmentIcon="@Icons.Material.Rounded.Password"
                                  Adornment="Adornment.End" />
                        <MudTextField @bind-Value="@_request.ConfirmPassword"
                                  Class="my-1"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Margin="Margin.Dense"
                                  Validation="@(new Func<string, string>(PasswordMatch))"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  AdornmentIcon="@Icons.Material.Rounded.Password"
                                  Adornment="Adornment.End" />
                    </MudForm>
                }
                <MudDivider />
            </MudCardContent>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="rounded-0" Disabled="@(!_success)" OnClick="OnOkay">
            @_btnText
        </MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;
    private ResetPasswordRequest _request = new ResetPasswordRequest();
    bool _success;
    private string _token = string.Empty;
    private string _email = string.Empty;
    private string _text = "Please enter your email address";
    Severity severity = Severity.Info;
    private string _btnText = "Okay";
    MudTextField<string> _pwField1;
    private bool _found = false;
    private bool _processing = false;
    private readonly DialogOptions _forgot = new()
        {
            Position = DialogPosition.TopCenter,
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            NoHeader = false,
            DisableBackdropClick = false,
        };
    private async void OnOkay()
    {
        var response = await UserService.ResetPassword(_request);
        if (response.IsSuccessStatusCode)
        {

            severity = Severity.Success;
            _text = "Password, Successfully reset.";
            Snack.Add("Password Reset, Successfully", Severity.Success);
            await Task.Delay(3000);
            Dialog.Close(DialogResult.Ok(true));
        }
        else
        {
            severity = Severity.Error;
            _text = "Password, Not Successfully reset.";
        }

    }
    private async void OnSending()
    {
        _processing = true;
        await Task.Delay(2000);
        var result = await UserService.ForgotPassword(_email);
        if (result.IsSuccessStatusCode)
        {
            _found = true;
            _text = "Reset token successfully sent! Check your email Account";
            _btnText = "Update";
            severity = Severity.Success;
            Snack.Add("Token sent Successfully", Severity.Success);
            _processing = false;
            StateHasChanged();
        }
        else
        {
            _text = "Account Not Found!";
            severity = Severity.Error;
            Snack.Add("Error No Account Found!", Severity.Error);
            StateHasChanged();
        }
        _processing = false;
    }
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (_pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}
