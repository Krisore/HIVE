@inject IDocumentReferenceService DocumentReferenceService
@inject IActivityLog ActivityLog
@inject ISnackbar Snack
@inject AuthenticationStateProvider AuthenticationStateProvider
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudDivider Class="my-1" />
        <MudContainer Style="max-height: 400px; overflow-y: scroll">
            <MudText Class="my-2" Typo="Typo.body2"> [Reference / References]</MudText>
            <ul>
                @foreach (var reference in References)
                {
                    <li>
                        <MudText Typo="Typo.caption" Align="Align.Justify">
                            📦 @reference.Name
                        </MudText>
                    </li>
                }
            </ul>
            <MudDivider Class="my-1" />
            <MudText Align="Align.Center" Typo="Typo.caption"> Do you really want to delete these records? <strong> This process cannot be undone. </strong></MudText>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="OnCancel"> Cancel </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnOkay"> Ok </MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    public MudDialogInstance DialogInstance { get; set; } = new();
    [Parameter]
    public HashSet<Reference> References { get; set; } = new();
    Task<AuthenticationState>? Authenticate { get; set; }
    private string Actor = string.Empty;
    private string Role = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        Authenticate = customAuthStateProvider.GetAuthenticationStateAsync();
        if (Authenticate != null)
        {
            var account = await Authenticate;
            if (account.User.Identity?.Name != null)
            {
                Actor = account.User.Identity.Name;
                Role = account.User.IsInRole("Administrator") ? "[Administrator]" : "[User]";
            }
        }
    }
    private async void OnOkay()
    {
        foreach (var reference in References)
        {
            try
            {
                var response = await DocumentReferenceService.DeleteReferenceAsync(reference.Id);
                if (response.IsSuccessStatusCode)
                {
                    await ActivityLog.WriteLog($"{Actor}",
                        $"{Actor}, delete  a reference named {reference.Name}",
                        "TRASH",
                        $"{Role}");
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine($"{exception.Message}");
            }
        }
        Snack.Add("Delete Successfully", Severity.Success);
        DialogInstance.Close(DialogResult.Ok(true));
    }
    private void OnCancel() => DialogInstance.Close(DialogResult.Cancel());
}
