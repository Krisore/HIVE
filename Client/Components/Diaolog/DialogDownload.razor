@inject IFileService FileService
@inject IJSRuntime JsRuntime
@inject IActivityLog ActivityLog
@inject ISnackbar Snack
@inject AuthenticationStateProvider AuthenticationStateProvider
<MudDialog>
    <DialogContent>
        <MudText> You want to download a copy of ? </MudText>
        <MudText Typo="Typo.body1" Align="Align.Justify">
            <strong> "@ContentText" </strong>
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel" DisableElevation="true">Cancel</MudButton>
        <MudButton EndIcon="@Icons.Material.Sharp.Download" Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" DisableElevation="true">Download</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [CascadingParameter]
    Task<AuthenticationState>? Authenticate { get; set; }
    [Parameter] public Color Color { get; set; }
    [Parameter] public string? ContentText { get; set; }
    [Parameter] public string? ButtonText { get; set; }
    [Parameter] public string? StoreFileName { get; set; }
    [Parameter] public string? FileName { get; set; }
    [Parameter] public string? Actor { get; set; }
    [Parameter] public string? Role { get; set; }
    private async Task Submit()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        Authenticate = customAuthStateProvider.GetAuthenticationStateAsync();
        if (Authenticate != null)
        {
            var account = await Authenticate;
            if (account.User.Identity?.Name != null)
            {
                Actor = account.User.Identity.Name;
                Role = account.User.IsInRole("Administrator") ? "[Administrator]" : "[User]";
            }
        }
        if (StoreFileName != null)
        {
            var response = await FileService.GetStoredFileNameAsync(StoreFileName);
            if (!response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("alert", "File not found");

            }
            else
            {
                var fileStream = await response.Content.ReadAsStreamAsync();
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                await JsRuntime.InvokeVoidAsync("downloadFileFromStream", FileName, streamRef);
                Snack.Add("Request  Successfully, Please wait..");
            }
        }
        var result = await ActivityLog.WriteLog($"{Actor}", $"DOWNLOAD a document entitled{FileName}", "[DOWNLOAD]", $"{Role}");
        if (result.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }
    void Cancel() => MudDialog.Cancel();
}