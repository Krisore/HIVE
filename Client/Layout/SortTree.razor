@inject IDocumentService DocumentService
@inject ITopicService TopicService
@inject ICurriculumService CurriculumService
@inject IDocumentReferenceService DocumentReferenceService
<div class="mx-2 my-2">
    <MudNavMenu Bordered="true" Color="Color.Primary" Dense="true">
        <MudNavGroup Disabled="false" Title="Year" @bind-Expanded="_folderFourExpanded">
            @foreach (var year in Years)
            {
                <MudNavLink Href=@($"/search/{year}")>
                    <MudText Typo="Typo.caption">
                        @year <cite>(@Documents.Count(d => d.DatePublished.Value.Year.ToString() == year)) </cite>
                    </MudText>
                </MudNavLink>
            }
        </MudNavGroup>
        <MudNavGroup Disabled="false" Title="Topic" @bind-Expanded="_folderOneExpanded" IconColor="Color.Primary">
            @foreach (var topic in Topics.Reverse())
            {
                <MudNavLink Href=@($"/search/{topic.Name}")>
                    <MudText Typo="Typo.caption">
                        @topic.Name <cite> (@Documents.Count(d => d.Topics.Any(t => t.Name == topic.Name) || d.Title.Contains(topic.Name, StringComparison.OrdinalIgnoreCase) || d.Abstract.Contains(topic.Name, StringComparison.OrdinalIgnoreCase))) </cite>
                    </MudText>
                </MudNavLink>
            }
        </MudNavGroup>
        <MudNavGroup Disabled="false" Title="Program" @bind-Expanded="_folderTwoExpanded">
            @foreach (var program in Programs.Reverse())
            {
                <MudNavLink Href=@($"/search/{program.Name}")>
                    <MudText Typo="Typo.caption">
                        @program.Alt <cite>(@Documents.Count(d => d.CurriculumId == program.Id))</cite>
                    </MudText>
                </MudNavLink>
            }
        </MudNavGroup>
        <MudNavGroup Disabled="false" Title="Document Type" @bind-Expanded="_folderThreeExpanded">
            @foreach (var type in Types.Reverse())
            {
                <MudNavLink Href=@($"/search/{type.Name}")>
                    <MudText Typo="Typo.caption">
                        @type.Name <cite>(@Documents.Count(d => d.ReferenceId == type.Id)) </cite>
                    </MudText>
                </MudNavLink>
            }
        </MudNavGroup>
    </MudNavMenu>
</div>

@code {
    private HashSet<string>? SelectedValues { get; set; }
    private IEnumerable<Document>? Documents { get; set; } = new List<Document>();
    private IEnumerable<Topic> Topics { get; set; } = new List<Topic>();
    private IEnumerable<Reference> Types { get; set; } = new List<Reference>();
    private IEnumerable<Curriculum> Programs { get; set; } = new List<Curriculum>();

    private List<string> Years = new();
    bool _folderOneExpanded;
    bool _folderTwoExpanded;
    bool _folderThreeExpanded;
    bool _folderFourExpanded;

    protected override async Task OnInitializedAsync()
    {
        var response = await DocumentService.GetDocumentsAsync();
        if (response.IsSuccessStatusCode)
        {
            Documents = await response.Content.ReadFromJsonAsync<List<Document>>();
            var documents = Documents.OrderByDescending(d => d.DatePublished);
            var curriculums = await CurriculumService.GetProgramsAsync();
            var types = await DocumentReferenceService.GetReferences();
            var topics = await TopicService.GetTopics();
            Topics  = topics.OrderByDescending(t => t.Name);
            Types = types.OrderByDescending(d => d.Name);
            Programs = curriculums.OrderByDescending(d => d.Name);
            foreach (var year in documents.Select(d => d.DatePublished?.Year.ToString()).Distinct())
            {
                if (year != null) Years.Add(year);
            }
        }
    }

}